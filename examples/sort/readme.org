* Notes on Undetected Violation in Sort Function

** Which function
The ~sort~ function in ct-verif benchmark (https://github.com/imdea-software/verifying-constant-time/blob/master/examples/sort/sort.c)

_Vulnerability_: The compiled code contains conditional jumps which depend on the secret.

** Compilation Options
_Version of the compiler_:
I used the compiler provided in ct-verif Vagrant environment to make sure
that it is the same compiler than ~ct-verif~ uses.
#+BEGIN_EXAMPLE
vagrant@vagrant-ubuntu-trusty-64:~/verifying-constant-time/examples/sort$ clang --version
Ubuntu clang version 3.5.2-svn232544-1~exp1 (branches/release_35) (based on LLVM 3.5.2)
Target: x86_64-pc-linux-gnu
Thread model: posix
#+END_EXAMPLE

_Options_: The vulnerability is introduced with these options =clang -O3 -m32 -march=i386 test_sort.c -c=
(Checked with IDA that the code is actually compiled with conditional jumps)

** Verification with ct-verif
Modify ct-verif Makefile to add the clang options:
#+BEGIN_EXAMPLE
 ## Additional flags
-SMACKOPTS     ?=
+#SMACKOPTS     ?=
+SMACKOPTS     ?=--clang-options="-O3 -m32 -march=i386"
#+END_EXAMPLE

=make verify= returns =Boogie program verifier finished with 1 verified, 0 errors=, meaning that the vulnerability is not detected.

** Details
ct-verif performs its analysis on the Boogie code generated from
LLVM after optimizations.

_LLVM code_:
If I compile ~sort.c~ to LLVM with clang (=clang -S -O3 -m32
-march=i386 -emit-llvm test_sort.c=), the resulting llvm code contains
a select operation =%. = select i1 %4, i32 %1, i32 %3= but no conditional jump.

Note that the same program compiled without the flag ~march=i386~
is compiled to constant-time code.

**Conclusion
The conditional jump is introduced in the backend pass
of =clang= because of the flag ~march=i386~ and cannot be detected by ct-verif.
